---

- name: Create temp file in {{ tmpdir }}/
  command: mktemp {{ tmpdir }}/extension.XXXXXXXXX
  changed_when: False
  register: tmp_filename

- name: Download Extension information
  uri:
    url="{{ gnome_extensions_url }}/extension-info/?pk={{extension_id}}&shell_version={{gnome_verion}}"
    method=GET
    return_content=yes
    dest={{ tmp_filename.stdout }}
  register: download_infos
  changed_when: False

- name: Parse Extension information
  shell: cat {{ tmp_filename.stdout }}
  register: result
  changed_when: False

- name: Converse that to usable informations
  set_fact:
    extension_info="{{ result.stdout | from_json }}"

- name: Display extension
  debug:
    msg="{{ extension_info }}"

- name: Download {{ gnome_extensions_url }}{{ extension_info.download_url }} to {{ working_directory }}/{{ extension_info.name }}-{{ extension_info.version }}.{{ extension_info.version_tag }}.zip
  get_url:
    url="{{ gnome_extensions_url }}{{ extension_info.download_url }}"
    dest="{{ working_directory }}/{{ extension_info.name }}-{{ extension_info.version }}.{{ extension_info.version_tag }}.zip"
  when: extension_info.download_url
  failed_when: not extension_info.download_url

- name: Check {{ gnome_extensions_dir }}/{{ extension_info.uuid }}
  file:
    path="{{ gnome_extensions_dir }}/{{ extension_info.uuid }}"
    state=directory
    mode=0755

- name: Unarchive "{{ working_directory }}/{{ extension_info.name }}-{{ extension_info.version }}.{{ extension_info.version_tag }}.zip"
  unarchive:
    src="{{ working_directory }}/{{ extension_info.name }}-{{ extension_info.version }}.{{ extension_info.version_tag }}.zip"
    dest="{{ gnome_extensions_dir }}/{{ extension_info.uuid }}"

- name: Ensure directories are 0755
  command: find {{ gnome_extensions_dir }}/{{ extension_info.uuid }} -type d -exec chmod 0755 {} \;

- name: Ensure files are 0644
  command: find {{ gnome_extensions_dir }}/{{ extension_info.uuid }} -type f -exec chmod 0644 {} \;

#- name: Enable {{ extension_info.uuid }}
#  become: yes
#  become_user: tuxa
#  command: gnome-shell-extension-tool -e {{ extension_info.uuid }}
#  register: enable_extension_result
#  changed_when: enable_extension_result.rc == 0
#  failed_when: enable_extension_result.rc >= 2

# Enable extention
#- name: Enable extension
#  set_fact:
#    enabled_extensions: "{{ {% for extension in enabled_extensions %}{{extension}} {% endfor %} + extension_info.uuid }}"
#    with_items: enabled_extensions
#
#- name: Debug
#  debug: msg="{{ enabled_extensions }}"


#
#- name: Get enabled extension list
#  command: gsettings get org.gnome.shell enabled-extensions
#  register: enabled_extensions
#  changed_when: False
#
#- name: List extension
#  debug:
#    msg="{{ enabled_extensions.stdout }}"
#
##  EXTENSION_LIST=$(gsettings get org.gnome.shell enabled-extensions | sed 's/^.\(.*\).$/\1/')
##
##  # check if extension is already enabled
##  EXTENSION_ENABLED=$(echo ${EXTENSION_LIST} | grep ${EXTENSION_UUID})
#
#
